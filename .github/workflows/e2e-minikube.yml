name: Tests on minikube

on: 
  push:
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '0 * * * *' # every hour

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - name: Prepare docker registry, minikube and helm 3
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        docker run -d \
        -p 5000:5000 \
        --restart=always \
        --name registry.localhost \
        -v $PWD/registry:/var/lib/registry \
        registry:2
        echo "starting cluster"
        minikube start --cpus=4 --memory=6800m --kubernetes-version=1.18.9 --insecure-registry="registry.localhost:5000"
        minikube ssh "sudo sh -c \"grep host.minikube.internal /etc/hosts | sed s/host.minikube.internal/registry.localhost/ >>/etc/hosts\""
        echo "Installing helm"
        curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        while [[ $(kubectl get nodes -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "Waiting for cluster nodes to be ready"; sleep 2; done
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
    - name: Install Istio
      run: |
        ./install-istio.sh
    - name: Install Kyma
      env: 
        SKIP_MODULES: apiserver-proxy,helm-broker,console,cluster-users,apiserver-proxy,logging,tracing
      run: |
        ./download-kyma-charts.sh
        IP=$(minikube ssh "grep host.minikube.internal /etc/hosts | cut -f1") 
        export REGISTRY_IP=${IP//[$'\t\r\n ']}
        ./install-kyma.sh
        sudo cp kyma.crt /usr/local/share/ca-certificates
        sudo update-ca-certificates
    - name: Install Commerce Mock
      run: |
        ./commerce-mock.sh
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    - name: Run End To End Test
      run: |
        ./app-connector-example.sh
